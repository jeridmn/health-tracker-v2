{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./tracking.service\";\nimport * as i2 from \"./local-storage.service\";\nexport class FoodDataService {\n  constructor(trackingService, localStorageService) {\n    this.trackingService = trackingService;\n    this.localStorageService = localStorageService;\n  }\n  getDailyCalories(date) {\n    var totalDailyCal = 0;\n    const dailyLogs = this.localStorageService.getData('foodLogs').filter(log => new Date(log.time).getDate() == date.getDate() && new Date(log.time).getMonth() == date.getMonth() && new Date(log.time).getFullYear() == date.getFullYear());\n    dailyLogs.forEach(log => {\n      totalDailyCal += log.calories;\n    });\n    return totalDailyCal;\n  }\n  getDateRange(dateRange) {\n    console.log('????');\n    var dates = [];\n    var currDate = new Date(dateRange[0]);\n    var startDate = dateRange[0].getDate();\n    var endDate = dateRange[1].getDate();\n    for (var i = startDate; i <= endDate; i++) {\n      dates.push(new Date(currDate));\n      currDate.setDate(currDate.getDate() + 1);\n    }\n    return dates;\n  }\n}\nFoodDataService.ɵfac = function FoodDataService_Factory(t) {\n  return new (t || FoodDataService)(i0.ɵɵinject(i1.TrackingService), i0.ɵɵinject(i2.LocalStorageService));\n};\nFoodDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FoodDataService,\n  factory: FoodDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,eAAe;EAGxBC,YAAoBC,eAAgC,EACxCC,mBAAwC;IADhC,oBAAe,GAAfD,eAAe;IACvB,wBAAmB,GAAnBC,mBAAmB;EAE/B;EAEAC,gBAAgB,CAACC,IAAU;IACvB,IAAIC,aAAa,GAAG,CAAC;IAErB,MAAMC,SAAS,GAAG,IAAI,CAACJ,mBAAmB,CAACK,OAAO,CAAC,UAAU,CAAC,CAACC,MAAM,CAACC,GAAG,IACrE,IAAIC,IAAI,CAACD,GAAG,CAACE,IAAI,CAAC,CAACC,OAAO,EAAE,IAAIR,IAAI,CAACQ,OAAO,EAAE,IAC9C,IAAIF,IAAI,CAACD,GAAG,CAACE,IAAI,CAAC,CAACE,QAAQ,EAAE,IAAIT,IAAI,CAACS,QAAQ,EAAE,IAChD,IAAIH,IAAI,CAACD,GAAG,CAACE,IAAI,CAAC,CAACG,WAAW,EAAE,IAAIV,IAAI,CAACU,WAAW,EACvD,CAAC;IAEFR,SAAS,CAACS,OAAO,CAACN,GAAG,IAAG;MACpBJ,aAAa,IAAII,GAAG,CAACO,QAAQ;IACjC,CAAC,CAAC;IAEF,OAAOX,aAAa;EACxB;EAEAY,YAAY,CAACC,SAAiB;IAC1BC,OAAO,CAACV,GAAG,CAAC,MAAM,CAAC;IACnB,IAAIW,KAAK,GAAW,EAAE;IACtB,IAAIC,QAAQ,GAAG,IAAIX,IAAI,CAACQ,SAAS,CAAC,CAAC,CAAC,CAAC;IACrC,IAAII,SAAS,GAAGJ,SAAS,CAAC,CAAC,CAAC,CAACN,OAAO,EAAE;IACtC,IAAIW,OAAO,GAAGL,SAAS,CAAC,CAAC,CAAC,CAACN,OAAO,EAAE;IAEpC,KAAK,IAAIY,CAAC,GAAGF,SAAS,EAAEE,CAAC,IAAID,OAAO,EAAEC,CAAC,EAAE,EAAE;MACvCJ,KAAK,CAACK,IAAI,CAAC,IAAIf,IAAI,CAACW,QAAQ,CAAC,CAAC;MAC9BA,QAAQ,CAACK,OAAO,CAACL,QAAQ,CAACT,OAAO,EAAE,GAAG,CAAC,CAAC;;IAE5C,OAAOQ,KAAK;EAChB;;AApCSrB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA4B,SAAf5B,eAAe;EAAA6B,YAFd;AAAM","names":["FoodDataService","constructor","trackingService","localStorageService","getDailyCalories","date","totalDailyCal","dailyLogs","getData","filter","log","Date","time","getDate","getMonth","getFullYear","forEach","calories","getDateRange","dateRange","console","dates","currDate","startDate","endDate","i","push","setDate","factory","providedIn"],"sourceRoot":"","sources":["/Users/jeremiahnavarro/Documents/GitHub/health-tracker-v2/root/frontend/src/app/service/food-data.service.ts"],"sourcesContent":["import { EventEmitter, Injectable, Output } from \"@angular/core\";\nimport { FoodLog } from \"../models/FoodLog\";\nimport { LocalStorageService } from \"./local-storage.service\";\nimport { TrackingService } from \"./tracking.service\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FoodDataService {\n\n\n    constructor(private trackingService: TrackingService,\n        private localStorageService: LocalStorageService) {\n\n    }\n    \n    getDailyCalories(date: Date) {\n        var totalDailyCal = 0;\n        \n        const dailyLogs = this.localStorageService.getData('foodLogs').filter(log => (\n            new Date(log.time).getDate() == date.getDate() &&\n            new Date(log.time).getMonth() == date.getMonth() &&\n            new Date(log.time).getFullYear() == date.getFullYear()\n        ))\n        \n        dailyLogs.forEach(log => {\n            totalDailyCal += log.calories\n        })\n\n        return totalDailyCal\n    }\n\n    getDateRange(dateRange: Date[]) {\n        console.log('????')\n        var dates: Date[] = []\n        var currDate = new Date(dateRange[0]);\n        var startDate = dateRange[0].getDate()\n        var endDate = dateRange[1].getDate()\n        \n        for (var i = startDate; i <= endDate; i++) {\n            dates.push(new Date(currDate))\n            currDate.setDate(currDate.getDate() + 1)\n        }\n        return dates\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}