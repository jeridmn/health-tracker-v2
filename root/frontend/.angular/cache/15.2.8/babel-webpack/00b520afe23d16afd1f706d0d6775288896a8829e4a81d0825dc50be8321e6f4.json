{"ast":null,"code":"import { FoodLog } from '../models/FoodLog';\nimport { nanoid } from 'nanoid';\nimport { WeightLog } from '../models/WeightLog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"./firebase.service\";\nimport * as i5 from \"./local-storage.service\";\nexport class TrackingService {\n  constructor(router, messageService, http, firebaseService, localStorageService) {\n    this.router = router;\n    this.messageService = messageService;\n    this.http = http;\n    this.firebaseService = firebaseService;\n    this.localStorageService = localStorageService;\n    this.userFoodLog = [];\n    this.userWeightLog = [];\n  }\n  getFoodLog() {\n    const uid = this.firebaseService.currentUID;\n    this.userFoodLog = [];\n    this.http.get(`http://localhost:3000/tracking/foodlog/history/${uid}`).subscribe(response => {\n      for (var i = 0; i < response.length; i++) {\n        this.userFoodLog.push(new FoodLog(response[i].name, response[i].calories, response[i].fat, response[i].carbs, response[i].protein, new Date(response[i].created_at), response[i].id));\n      }\n      this.localStorageService.setData(this.userFoodLog);\n    });\n  }\n  addFoodLog(foodLog) {\n    const calories = foodLog.calories;\n    const fat = foodLog.fat;\n    const carbs = foodLog.carbs;\n    const protein = foodLog.protein;\n    const uid = this.firebaseService.currentUID;\n    const timeAdded = new Date();\n    const foodLogID = nanoid(5);\n    console.log(foodLogID);\n    var name = '';\n    if (foodLog.name != '') name = foodLog.name;else name = 'Quick Add';\n    this.http.post('http://localhost:3000/tracking/foodlog', {\n      calories,\n      fat,\n      carbs,\n      protein,\n      uid,\n      timeAdded,\n      name,\n      foodLogID\n    }).subscribe({\n      next: () => {\n        console.log('Food added to database');\n        this.getFoodLog();\n      }\n    });\n  }\n  deleteFoodLog(foodLogID) {\n    console.log('function called');\n    this.http.delete(`http://localhost:3000/tracking/foodlog/${foodLogID}`).subscribe({\n      next: () => {\n        console.log(\"Food log deleted.\");\n        this.getFoodLog();\n      },\n      error: error => {\n        console.log(error);\n      }\n    });\n  }\n  addWeightLog(weightLog) {\n    const weight = weightLog.weight;\n    const uid = this.firebaseService.currentUID;\n    const timeAdded = new Date();\n    const weightLogID = nanoid(5);\n    var name = '';\n    this.http.post('http://localhost:3000/tracking/weights/add-weight', {\n      weight,\n      uid,\n      timeAdded,\n      weightLogID\n    }).subscribe({\n      next: () => {\n        console.log('weight added to database');\n        this.getWeightLog();\n      }\n    });\n  }\n  getWeightLog() {\n    const uid = this.firebaseService.currentUID;\n    this.userWeightLog = [];\n    this.http.get(`http://localhost:3000/tracking/weights/get-weights/${uid}`).subscribe(response => {\n      for (var i = 0; i < response.length; i++) {\n        this.userWeightLog.push(new WeightLog(response[i].weight, response[i].id, new Date(response[i].date)));\n      }\n    });\n  }\n}\nTrackingService.ɵfac = function TrackingService_Factory(t) {\n  return new (t || TrackingService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.FirebaseService), i0.ɵɵinject(i5.LocalStorageService));\n};\nTrackingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TrackingService,\n  factory: TrackingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["FoodLog","nanoid","WeightLog","TrackingService","constructor","router","messageService","http","firebaseService","localStorageService","getFoodLog","uid","currentUID","userFoodLog","get","subscribe","response","i","length","push","name","calories","fat","carbs","protein","Date","created_at","id","setData","addFoodLog","foodLog","timeAdded","foodLogID","console","log","post","next","deleteFoodLog","delete","error","addWeightLog","weightLog","weight","weightLogID","getWeightLog","userWeightLog","date","factory","providedIn"],"sourceRoot":"","sources":["/Users/jeremiahnavarro/Documents/GitHub/health-tracker-v2/root/frontend/src/app/service/tracking.service.ts"],"sourcesContent":["import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { createUserWithEmailAndPassword, getAuth, sendEmailVerification, sendSignInLinkToEmail, UserCredential } from \"firebase/auth\";\nimport { MessageService } from 'primeng/api';\nimport { FoodLog } from '../models/FoodLog';\nimport { nanoid } from 'nanoid';\nimport { FirebaseService } from './firebase.service';\nimport { WeightLog } from '../models/WeightLog';\nimport { LocalStorageService } from './local-storage.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrackingService {\n    userFoodLog: FoodLog[] = []\n    userWeightLog: WeightLog[] = []\n  \n    constructor(\n    private router: Router, \n    private messageService: MessageService,\n    private http: HttpClient,\n    private firebaseService: FirebaseService,\n    private localStorageService: LocalStorageService)  { \n\n  }\n\n  getFoodLog() {\n    const uid = this.firebaseService.currentUID\n\n    this.userFoodLog = []\n    this.http.get(`http://localhost:3000/tracking/foodlog/history/${uid}`).subscribe((response: any) => {\n      for(var i = 0; i < response.length; i++) {\n        this.userFoodLog.push(new FoodLog(\n          response[i].name,\n          response[i].calories,\n          response[i].fat,\n          response[i].carbs,\n          response[i].protein,\n          new Date(response[i].created_at),\n          response[i].id\n        ))\n        }\n        this.localStorageService.setData(this.userFoodLog)\n    })\n\n  }\n\n  addFoodLog(foodLog: FoodLog) {\n    const calories = foodLog.calories\n    const fat = foodLog.fat\n    const carbs = foodLog.carbs\n    const protein = foodLog.protein\n    const uid = this.firebaseService.currentUID\n    const timeAdded = new Date()\n    const foodLogID = nanoid(5)\n    console.log(foodLogID)\n    var name = ''\n\n    if(foodLog.name != '')\n        name = foodLog.name\n    else\n        name = 'Quick Add'\n\n    this.http.post('http://localhost:3000/tracking/foodlog', {calories, fat, carbs, protein, uid, timeAdded, name, foodLogID}).subscribe({\n      next: () => {\n        console.log('Food added to database')\n        this.getFoodLog()\n      }\n    })\n  }\n\n  deleteFoodLog(foodLogID: string) {\n    console.log('function called')\n    this.http.delete(`http://localhost:3000/tracking/foodlog/${foodLogID}`).subscribe({\n      next: () => {\n    console.log(\"Food log deleted.\");\n    this.getFoodLog();\n  },\n  error: (error) => {\n    console.log(error);\n  }\n});\n  }\n\n  addWeightLog(weightLog: WeightLog) {\n    const weight = weightLog.weight\n    const uid = this.firebaseService.currentUID\n    const timeAdded = new Date()\n    const weightLogID = nanoid(5)\n    var name = ''\n\n    this.http.post('http://localhost:3000/tracking/weights/add-weight', {weight,  uid, timeAdded,  weightLogID}).subscribe({\n      next: () => {\n        console.log('weight added to database')\n        this.getWeightLog()\n      }\n    })\n  }\n\n  getWeightLog() {\n    const uid = this.firebaseService.currentUID\n    this.userWeightLog = []\n\n    this.http.get(`http://localhost:3000/tracking/weights/get-weights/${uid}`).subscribe((response: any) => {\n      for(var i = 0; i < response.length; i++) {\n        this.userWeightLog.push(new WeightLog(\n          response[i].weight,\n          response[i].id,\n          new Date(response[i].date)\n        ))\n      }\n    })\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}