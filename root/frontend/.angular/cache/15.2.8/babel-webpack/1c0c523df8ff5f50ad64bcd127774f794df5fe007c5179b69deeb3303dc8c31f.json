{"ast":null,"code":"import _asyncToGenerator from \"/Users/jeremiahnavarro/Documents/GitHub/health-tracker-v2/root/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@angular/common/http\";\nexport class FirebaseService {\n  constructor(firebaseAuth, router, messageService, http) {\n    this.firebaseAuth = firebaseAuth;\n    this.router = router;\n    this.messageService = messageService;\n    this.http = http;\n    this.isLoggedIn = false;\n    this.invalidLogin = false;\n    this.currentUID = '';\n    this.auth = this.firebaseAuth;\n    this.navigateOnSignedIn = new EventEmitter();\n  }\n  signIn(email, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.auth.signInWithEmailAndPassword(email, password).then(UserCredential => {\n        console.log(UserCredential.user?.uid);\n        _this.router.navigate(['/dashboard']);\n      }).catch(() => {\n        _this.invalidLogin = true;\n      });\n    })();\n  }\n  signUp(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.auth.createUserWithEmailAndPassword(email, password).then(UserCredential => {\n        const user = UserCredential.user;\n        const email = UserCredential.user?.email;\n        const uid = UserCredential.user?.uid;\n        user?.sendEmailVerification().then(() => {\n          console.log('email verification sent');\n        });\n        localStorage.setItem('UID', uid);\n        _this2.router.navigate(['/dashboard']);\n        _this2.http.post('http://localhost:3000/users', {\n          email,\n          uid\n        }).subscribe(response => {\n          console.log('User data uploaded to database');\n        }, error => {\n          console.error('error uploading user data to database');\n        });\n      }).catch(error => {\n        console.error('Error signing up: ', error);\n      });\n    })();\n  }\n  logout() {\n    this.firebaseAuth.signOut();\n    localStorage.removeItem('user');\n    this.isLoggedIn = false;\n  }\n  checkIfLoggedIn() {\n    this.auth.onAuthStateChanged(user => {\n      if (user) {\n        this.currentUID = user.uid;\n        this.isLoggedIn = true;\n        console.log(\"logged in\");\n        this.navigateOnSignedIn.emit();\n      } else {\n        this.isLoggedIn = false;\n        console.log(\"logged out\");\n      }\n    });\n  }\n}\nFirebaseService.ɵfac = function FirebaseService_Factory(t) {\n  return new (t || FirebaseService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MessageService), i0.ɵɵinject(i4.HttpClient));\n};\nFirebaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FirebaseService,\n  factory: FirebaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FirebaseService","constructor","firebaseAuth","router","messageService","http","signIn","email","password","auth","signInWithEmailAndPassword","then","UserCredential","console","log","user","uid","navigate","catch","invalidLogin","signUp","createUserWithEmailAndPassword","sendEmailVerification","localStorage","setItem","post","subscribe","response","error","logout","signOut","removeItem","isLoggedIn","checkIfLoggedIn","onAuthStateChanged","currentUID","navigateOnSignedIn","emit","factory","providedIn"],"sourceRoot":"","sources":["/Users/jeremiahnavarro/Documents/GitHub/health-tracker-v2/root/frontend/src/app/service/firebase.service.ts"],"sourcesContent":["import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { createUserWithEmailAndPassword, getAuth, sendEmailVerification, sendSignInLinkToEmail, UserCredential } from \"firebase/auth\";\nimport { MessageService } from 'primeng/api';\nimport * as firebase from 'firebase/compat';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FirebaseService {\n  isLoggedIn = false;\n  invalidLogin = false;  \n  currentUID = ''\n  auth = this.firebaseAuth\n  @Output() navigateOnSignedIn = new EventEmitter()\n\n  constructor(public firebaseAuth : AngularFireAuth,\n    private router: Router, \n    private messageService: MessageService,\n    private http: HttpClient)  { \n\n  }\n\n  async signIn(email: string, password: string) {\n    this.auth.signInWithEmailAndPassword(email, password)\n    .then((UserCredential) => {\n      console.log(UserCredential.user?.uid)\n      this.router.navigate(['/dashboard'])\n    }).catch(() => {\n      this.invalidLogin = true\n    })\n  }\n\n  async signUp(email: string, password: string) {\n    this.auth.createUserWithEmailAndPassword(email, password)\n    .then((UserCredential) => {\n      const user = UserCredential.user\n      const email = UserCredential.user?.email\n      const uid = UserCredential.user?.uid\n      \n      user?.sendEmailVerification()\n      .then(() => {\n        console.log('email verification sent')\n      })\n\n      localStorage.setItem('UID', uid!)\n      this.router.navigate(['/dashboard'])\n\n      this.http.post('http://localhost:3000/users', {email, uid}).subscribe(\n        (response) => {\n          console.log('User data uploaded to database')\n        },\n        (error) => {\n          console.error('error uploading user data to database')\n        }\n      )\n      \n    }).catch((error) => {\n      console.error('Error signing up: ', error)\n    })\n  }\n\n  logout() {\n    this.firebaseAuth.signOut()\n    localStorage.removeItem('user')\n    this.isLoggedIn = false;\n  }\n\n  checkIfLoggedIn(){\n    this.auth.onAuthStateChanged((user) => {\n      if(user) {\n        this.currentUID = user.uid\n        this.isLoggedIn = true;\n        console.log(\"logged in\")\n        this.navigateOnSignedIn.emit()\n      } else {\n        this.isLoggedIn = false;\n        console.log(\"logged out\")\n      }  \n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}