{"ast":null,"code":"import { FoodLog } from '../models/FoodLog';\nimport { nanoid } from 'nanoid';\nimport { WeightLog } from '../models/WeightLog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"./firebase.service\";\nexport class TrackingService {\n  constructor(router, messageService, http, firebaseService) {\n    this.router = router;\n    this.messageService = messageService;\n    this.http = http;\n    this.firebaseService = firebaseService;\n    this.userFoodLog = [];\n    this.userWeightLog = [];\n  }\n  getFoodLog() {\n    const uid = this.firebaseService.currentUID;\n    this.userFoodLog = [];\n    this.http.get(`http://localhost:3000/tracking/foodlog/history/${uid}`).subscribe(response => {\n      for (var i = 0; i < response.length; i++) {\n        console.log(response[i].created_at);\n        this.userFoodLog.push(new FoodLog(response[i].name, response[i].calories, response[i].fat, response[i].carbs, response[i].protein, response[i].created_at, response[i].id));\n      }\n    });\n  }\n  addFoodLog(foodLog) {\n    const calories = foodLog.calories;\n    const fat = foodLog.fat;\n    const carbs = foodLog.carbs;\n    const protein = foodLog.protein;\n    const uid = this.firebaseService.currentUID;\n    const timeAdded = new Date();\n    const foodLogID = nanoid(5);\n    console.log(foodLogID);\n    var name = '';\n    if (foodLog.name != '') name = foodLog.name;else name = 'Quick Add';\n    this.http.post('http://localhost:3000/tracking/foodlog', {\n      calories,\n      fat,\n      carbs,\n      protein,\n      uid,\n      timeAdded,\n      name,\n      foodLogID\n    }).subscribe({\n      next: () => {\n        console.log('Food added to database');\n        this.getFoodLog();\n      }\n    });\n  }\n  deleteFoodLog(foodLogID) {\n    console.log('function called');\n    this.http.delete(`http://localhost:3000/tracking/foodlog/${foodLogID}`).subscribe({\n      next: () => {\n        console.log(\"Food log deleted.\");\n        this.getFoodLog();\n      },\n      error: error => {\n        console.log(error);\n      }\n    });\n  }\n  addWeightLog(weightLog) {\n    const weight = weightLog.weight;\n    const uid = this.firebaseService.currentUID;\n    const timeAdded = new Date();\n    const weightLogID = nanoid(5);\n    var name = '';\n    this.http.post('http://localhost:3000/tracking/weights/add-weight', {\n      weight,\n      uid,\n      timeAdded,\n      weightLogID\n    }).subscribe({\n      next: () => {\n        console.log('weight added to database');\n        this.getWeightLog();\n      }\n    });\n  }\n  getWeightLog() {\n    const uid = this.firebaseService.currentUID;\n    this.userWeightLog = [];\n    this.http.get(`http://localhost:3000/tracking/weights/get-weights/${uid}`).subscribe(response => {\n      for (var i = 0; i < response.length; i++) {\n        this.userWeightLog.push(new WeightLog(response[i].weight, response[i].id, new Date(response[i].date)));\n      }\n      console.log(this.userWeightLog);\n    });\n  }\n}\nTrackingService.ɵfac = function TrackingService_Factory(t) {\n  return new (t || TrackingService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.FirebaseService));\n};\nTrackingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TrackingService,\n  factory: TrackingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["FoodLog","nanoid","WeightLog","TrackingService","constructor","router","messageService","http","firebaseService","getFoodLog","uid","currentUID","userFoodLog","get","subscribe","response","i","length","console","log","created_at","push","name","calories","fat","carbs","protein","id","addFoodLog","foodLog","timeAdded","Date","foodLogID","post","next","deleteFoodLog","delete","error","addWeightLog","weightLog","weight","weightLogID","getWeightLog","userWeightLog","date","factory","providedIn"],"sourceRoot":"","sources":["/Users/jeremiahnavarro/Documents/GitHub/health-tracker-v2/root/frontend/src/app/service/tracking.service.ts"],"sourcesContent":["import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { createUserWithEmailAndPassword, getAuth, sendEmailVerification, sendSignInLinkToEmail, UserCredential } from \"firebase/auth\";\nimport { MessageService } from 'primeng/api';\nimport { FoodLog } from '../models/FoodLog';\nimport { nanoid } from 'nanoid';\nimport { FirebaseService } from './firebase.service';\nimport { WeightLog } from '../models/WeightLog';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrackingService {\n    userFoodLog: FoodLog[] = []\n    userWeightLog: WeightLog[] = []\n  \n    constructor(\n    private router: Router, \n    private messageService: MessageService,\n    private http: HttpClient,\n    private firebaseService: FirebaseService)  { \n\n  }\n\n  getFoodLog() {\n    const uid = this.firebaseService.currentUID\n\n    this.userFoodLog = []\n    this.http.get(`http://localhost:3000/tracking/foodlog/history/${uid}`).subscribe((response: any) => {\n      for(var i = 0; i < response.length; i++) {\n        console.log(response[i].created_at)\n\n        this.userFoodLog.push(new FoodLog(\n          response[i].name,\n          response[i].calories,\n          response[i].fat,\n          response[i].carbs,\n          response[i].protein,\n          response[i].created_at,\n          response[i].id\n        ))\n        }\n    })\n\n  }\n\n  addFoodLog(foodLog: FoodLog) {\n    const calories = foodLog.calories\n    const fat = foodLog.fat\n    const carbs = foodLog.carbs\n    const protein = foodLog.protein\n    const uid = this.firebaseService.currentUID\n    const timeAdded = new Date()\n    const foodLogID = nanoid(5)\n    console.log(foodLogID)\n    var name = ''\n\n    if(foodLog.name != '')\n        name = foodLog.name\n    else\n        name = 'Quick Add'\n\n    this.http.post('http://localhost:3000/tracking/foodlog', {calories, fat, carbs, protein, uid, timeAdded, name, foodLogID}).subscribe({\n      next: () => {\n        console.log('Food added to database')\n        this.getFoodLog()\n      }\n    })\n  }\n\n  deleteFoodLog(foodLogID: string) {\n    console.log('function called')\n    this.http.delete(`http://localhost:3000/tracking/foodlog/${foodLogID}`).subscribe({\n      next: () => {\n    console.log(\"Food log deleted.\");\n    this.getFoodLog();\n  },\n  error: (error) => {\n    console.log(error);\n  }\n});\n  }\n\n  addWeightLog(weightLog: WeightLog) {\n    const weight = weightLog.weight\n    const uid = this.firebaseService.currentUID\n    const timeAdded = new Date()\n    const weightLogID = nanoid(5)\n    var name = ''\n\n    this.http.post('http://localhost:3000/tracking/weights/add-weight', {weight,  uid, timeAdded,  weightLogID}).subscribe({\n      next: () => {\n        console.log('weight added to database')\n        this.getWeightLog()\n      }\n    })\n  }\n\n  getWeightLog() {\n    const uid = this.firebaseService.currentUID\n    this.userWeightLog = []\n\n    this.http.get(`http://localhost:3000/tracking/weights/get-weights/${uid}`).subscribe((response: any) => {\n      for(var i = 0; i < response.length; i++) {\n        this.userWeightLog.push(new WeightLog(\n          response[i].weight,\n          response[i].id,\n          new Date(response[i].date)\n        ))\n      }\n      console.log(this.userWeightLog)\n    })\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}